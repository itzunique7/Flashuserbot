#MIT License

#Copyright (c) 2024 ·¥ã·¥ú…¥·¥Ä ü [AFK]

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.


from pyrogram import Client, filters
from STORM.Database.pm import *
from STORM.powers import get_id
from config import PM_PIC, SUDO_USERS
hl = "."
pm_watcher = 5
KEX = PM_PIC

TEXT = """
‚Ä¢            **[Íú±·¥õ·¥è Ä·¥ç](https://github.com/VARC9210/STORM-USERBOT)**
‚ï∞‚Ä¢ **·¥è·¥°…¥·¥á Ä** ¬ª {}
‚Ä¢ **·¥õ ú…™s …™s ·¥ã·¥áx ·¥ò·¥ç s·¥á·¥Ñ·¥ú Ä…™·¥õ è üõ°Ô∏è**
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ 
    ** ú·¥á è  ô·¥ú·¥Ö·¥Ö è** ü•Ä
    **…™“ì  è·¥è·¥ú s·¥ò·¥Ä·¥ç  ú·¥á Ä·¥á ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥ç è**
    **Íú±·¥á…¥Íú±·¥á…™'s ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥Ä ü  è·¥è·¥ú ·¥°…™ ü ü  ô·¥á**
    ** ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö** 
‚Ä¢ **·¥°·¥Ä Ä…¥  ü…™·¥ç…™·¥õs** ¬ª {}      
‚ï∞‚Ä¢ ** è·¥è·¥ú Ä ·¥°·¥Ä Ä…¥s** ¬ª {}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚Ä¢           **[Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ](https://t.me/STORM_CHATZ)**
"""

@Client.on_message(
    filters.command(["pmpermit"], ".") & (filters.me | filters.user(SUDO_USERS))
)
async def pmpermit(client, message):
    x = await is_pm_on()
    try:
        tg = message.text.split()[1].lower()
    except:
        return await message.edit(f"{hl}pmpermit [on | off]")
    if not tg in ["on", "off"]:
        return await message.edit(f"{hl}pmpermit [on | off]")
    if tg == "on":
        if x:
            return await message.edit("·¥ò·¥ç·¥ò·¥á Ä·¥ç…™·¥õ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö....")
        await toggle_pm()
        if await limit() == 0:
            await update_warns(3)
        return await message.edit("·¥ò·¥ç·¥ò·¥á Ä·¥ç…™·¥õ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö....")
    if not x:
        return await message.edit("·¥ò·¥ç·¥ò·¥á Ä·¥ç…™·¥õ …™Íú± …¥·¥è·¥õ ·¥á…¥·¥Ä ô ü·¥á·¥Ö....")
    await toggle_pm()
    return await message.edit("·¥ò·¥ç·¥ò·¥á Ä·¥ç…™·¥õ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö....")

@Client.on_message(
    filters.command(["approve", "disapprove", "a", "da", "allow", "disallow"], ".") & (filters.me | filters.user(SUDO_USERS))
)
async def appr_dis(client, message):
    if str(message.chat.id)[0] == "-":
        try:
            id = await get_id(_, message)
        except:
            return await message.edit("Íú∞·¥è Ä ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á ·¥úÍú±·¥á Ä …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢…™·¥†·¥á ·¥ç·¥á …™'·¥Ö ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ ú·¥Ä·¥õ ·¥úÍú±·¥á Ä..")
    else:
        id = message.chat.id
    tg = message.text.split()[0][1]
    x = await is_approved(id)
    if tg == "d":
        if not x:
            return await message.edit("·¥õ ú…™Íú± ·¥úÍú±·¥á Ä …™Íú± …¥·¥è·¥õ ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö..")
        await disapprove(id)
        return await message.edit("·¥úÍú±·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö…™Íú±·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö ·¥õ·¥è ·¥ò·¥ç....")
    if x:
        return await message.edit("·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á ·¥úÍú±·¥á Ä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö....")
    await approve(id) 
    await reset_warns(id)
    return await message.edit("·¥úÍú±·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö ·¥õ·¥è ·¥ò·¥ç....")

@Client.on_message(
    filters.command(["setwarns"], ".") & (filters.me | filters.user(SUDO_USERS))
)
async def setwarn(client, message):
    try:
        count = int(message.text.split()[1])
    except:
        return await message.edit(f"{hl}setwarns [·¥†·¥Ä ü·¥ú·¥á]")
    if count == 0:
        return await message.edit("…¢…™·¥†·¥á ·¥ç·¥á ·¥†·¥Ä ü·¥ú·¥á ·¥õ·¥è Íú±·¥á·¥õ ·¥°·¥Ä Ä…¥Íú±..")
    await update_warns(count)
    await message.edit(f"·¥Ö·¥ç ·¥°·¥Ä Ä…¥Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á·¥õ ·¥õ·¥è {count}..")
    
@Client.on_message(filters.private, group=pm_watcher)
async def wtch(client, message):
    user_ = message.from_user
    if message.from_user.id == client.me.id:
        return
    if not await is_pm_on():
        return
    if user_.is_bot:
        return
    if await is_approved(message.from_user.id):
        return
    await add_warn(message.from_user.id)
    if await limit() <= await get_warns(message.from_user.id):
        await message.reply("Íú±·¥ò·¥Ä·¥ç·¥ç·¥á Ä ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥Ä…¥·¥Ö  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è.....")
        await reset_warns(message.from_user.id)
        return await client.block_user(message.from_user.id)
    await message.reply_photo(KEX, caption=TEXT.format((await client.get_me()).first_name, await limit(), await get_warns(message.from_user.id)))
